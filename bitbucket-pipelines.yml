options:
  docker: true
  size: 2x

definitions:
  services:
    docker:
      memory: 4096
  steps:
    - step: &npm-install-and-test
        name: '⚡ npm install and test'
        image: node:16
        script:
          - npm i
          - npm test
        artifacts:
          - node_modules/**/*

    - step: &npm-build-and-prune
        name: '⚡ npm build and prune'
        image: node:16-alpine
        script:
          - npm run build
          - npm prune --production
        artifacts:
          - dist/**
          - h5p/custom/**

    - step: &commitlint
        name: '📝 conventional commits check'
        image: node:16
        script:
          - /bin/bash commitlint-pipeline-check.sh

    - step: &docker-build-and-run
        name: '🐳 docker build and run'
        services:
          - docker
        script:
          - docker build -t $DOCKER_REPO_NAME .
          - docker run --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL -d --name=check-startup $DOCKER_REPO_NAME && sleep 10 && docker top check-startup

    - step: &version-bump
        name: '🏷️ version bump'
        trigger: 'manual'
        deployment: release
        image: node:16
        artifacts:
          - version.txt
        services:
          - docker
        script:
          - npm run release
          - npm run build
          - npm prune --production
          - docker build -t $DOCKER_REPO_NAME .
          - >
            docker run --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL \
              -d \
              --name=check-startup \
              --env-file ./.env.ci \
              $DOCKER_REPO_NAME && sleep 8 && docker logs check-startup && docker top check-startup
          - export VERSION_TAG=$(git describe --tags --abbrev=0)
          - echo $VERSION_TAG > ./version.txt
          - pipe: atlassian/aws-ecr-push-image:1.5.0
            variables:
              AWS_DEFAULT_REGION: eu-west-2
              IMAGE_NAME: $DOCKER_REPO_NAME
              TAGS: '$VERSION_TAG'
          # This step will fail if 'master' branch write permissions isn't set to 'everyone'.
          - git push origin master
          - git push origin $VERSION_TAG

    - step: &build-and-push-to-ecr
        name: "🐳 push docker image to AWS"
        deployment: alpha
        image: python:3.9-alpine
        services:
          - docker
        size: 2x
        caches:
          - docker
        script:
          - docker build -t $DOCKER_REPO_NAME .
          - docker run --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL -d --name=check-startup $DOCKER_REPO_NAME && sleep 10 && docker top check-startup
          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - pipe: atlassian/aws-ecr-push-image:1.5.0
            variables:
              AWS_DEFAULT_REGION: eu-west-2
              IMAGE_NAME: $DOCKER_REPO_NAME
              TAGS: 'alpha $COMMIT_TAG $BRANCH_TAG-$COMMIT_TAG'

    - step: &deploy-to-alpha
        name: "🚀 deploy to alpha"
        script:
          - pipe: atlassian/aws-ecs-deploy:1.6.1
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_ALPHA_OLD
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_ALPHA_OLD
              AWS_DEFAULT_REGION: 'ap-northeast-2'
              CLUSTER_NAME: 'kidsloop-alpha'
              SERVICE_NAME: 'kidsloop-alpha-h5p'
              FORCE_NEW_DEPLOYMENT: 'true'
              WAIT: 'true'
          - pipe: atlassian/aws-cloudfront-invalidate:0.6.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_ALPHA_OLD
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_ALPHA_OLD
              AWS_DEFAULT_REGION: 'ap-northeast-2'
              DISTRIBUTION_ID: 'E2RNE9HGMPLWTO' # h5p.alpha.kidsloop.net
              PATHS: '/h5p/libraries/* /h5p/play/*'
          - pipe: atlassian/aws-cloudfront-invalidate:0.6.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_ALPHA_OLD
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_ALPHA_OLD
              AWS_DEFAULT_REGION: 'ap-northeast-2'
              DISTRIBUTION_ID: 'E2694SIA1FLALO' # live.alpha.kidsloop.net
              PATHS: '/h5p/libraries/* /h5p/play/*'

    # This step will deploy an image to the new "landing zone" environment via ArgoCD.
    # See here for the equivalent Github Actions pipeline: https://github.com/KL-Engineering/user-service/pull/27
    - step: &step-deploy-landing-zone
        name: "Deploy built image to the Kidsloop landing zone"
        image: argoproj/argocd:v2.3.1
        script:
          # What are we deploying?
          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - export DEPLOY_TAG=$BRANCH_TAG-$COMMIT_TAG
          - echo "Tag to deploy - $DEPLOY_TAG"

          # Set up port forwarding
          - echo $TOOLS_KUBECONFIG_CONTENT_B64 | base64 -d > $BITBUCKET_CLONE_DIR/kubeconfig.yml
          - >
            PORTFORWARD_CONTAINER=$(
            docker run
            --volume $BITBUCKET_CLONE_DIR/kubeconfig.yml:/mnt/kubeconfig.yml
            --env KUBECONFIG=/mnt/kubeconfig.yml
            --publish 8080:8080
            --hostname kubeproxy
            --detach bitnami/kubectl:1.21
            port-forward -n argocd svc/argocd-server
            --address 0.0.0.0 8080:80
            )
          - sleep 5

          # Deploy tag to environment with ArgoCD
          - >
            export
            ARGOCD_SERVER=localhost:8080
            ARGOCD_APP=uk-landingzone-h5p-service
            ARGOCD_APP_CHART_TAG_PATH=h5p.tag
            ARGOCD_OPTS='--grpc-web --insecure --plaintext'
          - >
            argocd login $ARGOCD_SERVER
            --username $ARGOCD_AUTH_USERNAME
            --password $ARGOCD_AUTH_PASSWORD
            $ARGOCD_OPTS
          - argocd app get $ARGOCD_APP
          - argocd app set $ARGOCD_APP -p $ARGOCD_APP_CHART_TAG_PATH=$DEPLOY_TAG
          - argocd app sync $ARGOCD_APP --timeout 300

          # Clean up tasks
          - docker logs $PORTFORWARD_CONTAINER
          - docker kill $PORTFORWARD_CONTAINER
          - docker rm $PORTFORWARD_CONTAINER
        services:
          - docker
        caches:
          - docker

pipelines:
  pull-requests:
    '**':
      - step: *npm-install-and-test
      - step: *commitlint
      - step: *npm-build-and-prune
      - step: *docker-build-and-run

  branches:
    master:
      - step: *npm-install-and-test
      - step: *version-bump
      - step:
          name: '🔔 slack notification'
          script:
            - echo 'Sending Slack notification...'
          after-script:
            - export VERSION_TAG=$(cat ./version.txt)
            - pipe: docker://cabauman/slack-notify-commits:0.6.1
              variables:
                WEBHOOK_URL: $SLACK_WEBHOOK
                MESSAGE: '🚀 A new build of H5P service ($VERSION_TAG) has been pushed to *ECR*.'
                BITBUCKET_USER: $BITBUCKET_PIPELINE_READER_USER
                BITBUCKET_APP_PASSWORD: $BITBUCKET_PIPELINE_READER_APP_PASSWORD

    alpha:
      - step:
          name: Atlassian Security Secrets Scan
          script:
            - pipe: atlassian/git-secrets-scan:0.5.1
      - step: *npm-install-and-test
      - step: *npm-build-and-prune
      - step: *build-and-push-to-ecr
      - step: *deploy-to-alpha
      - step: *step-deploy-landing-zone
      - step:
          name: '🔔 slack notification'
          script:
            - echo 'Sending Slack notification...'
          after-script:
            - pipe: docker://cabauman/slack-notify-commits:0.6.1
              variables:
                WEBHOOK_URL: $SLACK_WEBHOOK
                MESSAGE: '🚀 A new build of H5P service has been deployed to *alpha*.'
                BITBUCKET_USER: $BITBUCKET_PIPELINE_READER_USER
                BITBUCKET_APP_PASSWORD: $BITBUCKET_PIPELINE_READER_APP_PASSWORD
